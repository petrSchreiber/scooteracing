uses "ui"
uses "console"

#include once "resourceManager.tbasicu"

type tTrack

  mRoad  as int32
  mSign      as int32
  mTerrain   as int32
  mTerrainTree   as int32
  
  dlTrack    as int32
  
  startX     as single
  startZ     as single
  startRot   as single

  hBitmap    as UInt32
  nWidth     as uint32
  nHeight    as uint32
  
  function private_IsRoad(x as int32, y as int32) as int32
    return in(Canvas_GetPixel(x, y), %COLOR_ROAD, %COLOR_START, %COLOR_FINISH) > 0
  end function
  
  function Load(fileName as string)
    string modelPath = app_sourcepath+"data\Models\"
    
    ' -- Load resources
    me.mRoad = gResourceManager.GetModelId()
    me.mSign     = gResourceManager.GetModelId()
    me.mTerrain  = gResourceManager.GetModelId()
    me.mTerrainTree  = gResourceManager.GetModelId()
    
    me.dlTrack   = gResourceManager.GetDListId()
    
    tbgl_m15LoadModel modelPath + "road8.m15", "", me.mRoad, 0, %TBGL_NORMAL_PRECISE
    tbgl_m15LoadModel modelPath + "sign8.m15", "", me.mSign, 0, %TBGL_NORMAL_PRECISE
    tbgl_m15LoadModel modelPath + "terrain8.m15", "", me.mTerrain, 0, %TBGL_NORMAL_PRECISE
    tbgl_m15LoadModel modelPath + "terrain_tree8.m15", "", me.mTerrainTree, 0, %TBGL_NORMAL_PRECISE
    
    ' -- Create display list of track
    Canvas_BitmapGetFileInfo(fileName, me.nWidth, me.nHeight)
    
    me.hBitmap = Canvas_BitmapLoad(fileName, me.nWidth, me.nHeight)
    Canvas_Attach(me.hBitmap, 0, 0)
    
    %COLOR_TERRAIN = rgb(34, 177, 76)
    %COLOR_TERRAIN_TREE = rgb(181, 230, 29)
    %COLOR_ROAD    = rgb(195, 195, 195)
    %COLOR_START   = rgb(255, 127, 39)
    %COLOR_FINISH  = rgb(237, 28, 36)
    int32 x, y
    single tileX, tileZ
    tbgl_newList me.dlTrack
    for x = 1 to me.nWidth
      for y = 1 to me.nHeight
        
        tileX = x*8-(me.nWidth*8)/2
        tileZ = y*8-(me.nHeight*8)/2
        tbgl_pushMatrix
          tbgl_translate tileX, 0, tileZ
         
          if Canvas_GetPixel(x, y) = %COLOR_TERRAIN then
              tbgl_m15DrawModel me.mTerrain

          elseif Canvas_GetPixel(x, y) = %COLOR_TERRAIN_TREE then
              tbgl_rotate 0, rnd(0,360),0'*90,0
              tbgl_m15DrawModel me.mTerrainTree

          elseif Canvas_GetPixel(x, y) = %COLOR_ROAD then
              tbgl_m15DrawModel me.mRoad
          
          elseif Canvas_GetPixel(x, y) = %COLOR_START then
            
            if Canvas_GetPixel(x+1, y) = %COLOR_ROAD then
              me.startRot = 90
            elseif Canvas_GetPixel(x, y+1) = %COLOR_ROAD then
              me.startRot = 180
            elseif Canvas_GetPixel(x-1, y) = %COLOR_ROAD then
              me.startRot = 270
            else
              me.startRot = 0
            end if
            
            tbgl_rotate me.startRot, 0, 1, 0
            
            tbgl_m15DrawModel me.mSign
            
            me.startX = tileX
            me.startZ = tileZ
            
          elseif Canvas_GetPixel(x, y) = %COLOR_FINISH then
            if Canvas_GetPixel(x+1, y) = %COLOR_ROAD then
              tbgl_rotate 90, 0, 1, 0
            elseif Canvas_GetPixel(x-1, y) = %COLOR_ROAD then
              tbgl_rotate 270, 0, 1, 0
            end if
          
            tbgl_m15DrawModel me.mSign
          end if
        tbgl_popMatrix

      next
  
    next
    
    tbgl_endList
    
    ' -- Free resources
    gResourceManager.FreeModelId(me.mRoad)
    gResourceManager.FreeModelId(me.mSign)
    gResourceManager.FreeModelId(me.mTerrain)
    gResourceManager.FreeModelId(me.mTerrainTree)
    
    return me.dlTrack
  end function
  
  function isTerrain(worldX as single, worldZ as single)
    Canvas_Attach(me.hBitmap, 0, 0)
    int32 x = ((me.nWidth*8)/2 + worldX)/8
    int32 y = ((me.nHeight*8)/2 + worldZ)/8
    
    return not in(Canvas_GetPixel(x, y), %COLOR_ROAD, %COLOR_START, %COLOR_FINISH)
  end function

end type
