uses "tbgl", "tbdi"

#include once "data/game/resourceManager.tbasicu"
#include once "offScreenRenderer/offScreenRenderer8b.tbasicu"
#include once "controllers/xboxOne.tbasicu"
#include once "racers/scooter.tbasicu"
#include once "data/game/track.tbasicu"

begin const
  ' -- Scene IDs
  %scene  = 1
 
  ' -- Entity IDs 
  %eLight
  %eTrack
end const

function tbMain()
  
  double frameRate
  
  int32 ScreenWidth = 800
  int32 ScreenHeight= 600
  
  ' -- Create and show window
  dWord hWnd = tbgl_createWindowEx("Scooteracing - press ESC to quit", ScreenWidth, ScreenHeight, 32, %TBGL_WS_WINDOWED | %TBGL_WS_CLOSEBOX)
  tbgl_showWindow

  dim playerOneController, playerTwoController as tXBoxOneController
  playerOneController.Initialize(hWnd, 1)
  playerTwoController.Initialize(hWnd, 2)

  ' -- Create scene
  tbgl_sceneCreate(%scene)

  ' -- Create point light  
  tbgl_entityCreateLight(%scene, %eLight, 0, %TBGL_LIGHTTYPE_DIRECTIONAL)
    tbgl_entityTurn(%scene, %eLight, 90, 45, 0)

  ' -- Create something to look at
  dim track as tTrack
  int32 dlTrack = track.Load(app_sourcepath+"data\tracks\Curly.bmp")
  tbgl_entityCreateDLSlot(%scene, %eTrack, 0, dlTrack)


  dim player1 as tScooterRacer
  player1.Load("data/models/scooter.m15")
  player1.ToEntity(%scene)
    
  dim player2 as tScooterRacer
  player2.Load("data/models/scooter.m15")
  player2.ToEntity(%scene)
  
  dim osr as offScreenRenderer8b
  dim osr2 as offScreenRenderer8b
  long width, height
  tbgl_getWindowClient(hWnd, width, height)
  osr.buildBuffer(width/4, height/4, %OSR_NEAREST_NEIGHBOUR)
  osr2.buildBuffer(width/4, height/4, %OSR_NEAREST_NEIGHBOUR)
  
  single cx, cy, cz
  single sx, sy, sz
  single tx, ty, tz
  
  single speed, inclination
  single gas, steer
  
  tbgl_backColor 64,128,255
  
  ' -- Main loop
  while tbgl_isWindow(hWnd) 
    frameRate = tbgl_getFrameRate
    
    osr.beginRender()
      tbgl_renderMatrix3D
      tbgl_clearFrame
        
        player1.EnforceCamera()
        tbgl_sceneRender(%scene)

    osr.endRender()
    
    osr2.beginRender()
      tbgl_renderMatrix3D
      tbgl_clearFrame
        
        player2.EnforceCamera()
        tbgl_sceneRender(%scene)

    osr2.endRender()    
      
    tbgl_renderMatrix2D(0, 0, 1, 1)
    tbgl_clearFrame
      
      tbgl_pushColor 255,255,255
        tbgl_pushState %TBGL_TEXTURING
          tbgl_pushStateProtect %TBGL_LIGHTING
          
            osr.bindTexture()

            tbgl_beginPoly %GL_QUADS
              tbgl_texCoord2d 0, 0.0: tbgl_vertex 0, 0.5
              tbgl_texCoord2d 1, 0.0: tbgl_vertex 1, 0.5
              tbgl_texCoord2d 1, 0.5: tbgl_vertex 1, 1
              tbgl_texCoord2d 0, 0.5: tbgl_vertex 0, 1
            tbgl_endPoly

            osr2.bindTexture()

            tbgl_beginPoly %GL_QUADS
              tbgl_texCoord2d 0, 0.0: tbgl_vertex 0, 0.0
              tbgl_texCoord2d 1, 0.0: tbgl_vertex 1, 0.0
              tbgl_texCoord2d 1, 0.5: tbgl_vertex 1, 0.5
              tbgl_texCoord2d 0, 0.5: tbgl_vertex 0, 0.5
            tbgl_endPoly
            
          tbgl_popStateProtect
        tbgl_popState
      tbgl_popColor
      
    tbgl_drawFrame

    ' -- ESCAPE key to exit application
    if tbgl_getWindowKeyState(hWnd, %VK_ESCAPE) then exit while
    
    player1.ProcessInput(playerOneController)
    player1.ApplyInput(frameRate)

    player2.ProcessInput(playerTwoController)
    player2.ApplyInput(frameRate)

  wend

  tbgl_destroyWindow
end function
