uses "ini"
%SCOOTER_BODY_LAYER = 8
type tScooterRacer

  configFile as string
  modelId as int32
  
  scene        as int32
  pivotEntity  as int32
  entity       as int32
  cameraPivot  as int32
  cameraEntity as int32
  
  gas         as Float32
  speed       as Float32
  
  steer       as Float32
  inclination as Float32
  
  maxInclination  as float32
  maxSpeed        as float32
  maxSteer        as float32
  maxWind         as float32
  maxAcceleration as float32

  function Load(configFile as string)
    me.configFile = configFile
    
    me.ReleaseResources()
  
    printl configFile
    string modelFile = app_sourcepath + "data\models\" + ini_getkey(me.configFile, "Geometry", "model")
    printl modelFile
    me.modelId = gResourceManager.getModelId()
    tbgl_m15LoadModel modelFile, "", me.modelId, 0, %TBGL_NORMAL_PRECISE
    
    int32 i
    
    string rgbColor = ini_getkey(configFile, "Geometry", "bodyColor")
    byte r = parse$(rgbColor, ",", 1)
    byte g = parse$(rgbColor, ",", 2)
    byte b = parse$(rgbColor, ",", 3)
    for i = 1 to tbgl_m15GetModelVertexcount(me.modelId)
      if tbgl_m15GetVertexLayer(me.modelId, i) = %SCOOTER_BODY_LAYER then
        tbgl_m15SetVertexRGB(me.modelId, i, r, g, b)
      end if
    next
    
    me.Initialize()
    
  end function
  
  function Initialize()
    me.maxInclination = ini_getkey(me.configFile, "Params", "maxInclination")
    me.maxSpeed       = ini_getkey(me.configFile, "Params", "maxSpeed")
    me.maxSteer       = ini_getkey(me.configFile, "Params", "maxSteer")
    me.maxWind        = ini_getkey(me.configFile, "Params", "maxWind")
    me.maxAcceleration= ini_getkey(me.configFile, "Params", "maxAcceleration")
    
    me.gas = 0
    me.speed = 0
    me.steer = 0
    me.inclination = 0
    
    me.AdjustCamera()
  end function
  
  function ToEntity(scene as int32) as int32
    me.scene = scene
    
    if me.pivotEntity then tbgl_entityDestroy(me.scene, me.pivotEntity)
    if me.entity then tbgl_entityDestroy(me.scene, me.entity)
    if me.cameraPivot then tbgl_entityDestroy(me.scene, me.cameraPivot)
    if me.cameraEntity then tbgl_entityDestroy(me.scene, me.cameraEntity)
    
    me.pivotEntity = tbgl_entityGetFreeID(me.scene)
    tbgl_entityCreatePivot(me.scene, me.pivotEntity, 0)
  
    me.entity = tbgl_entityGetFreeID(me.scene)
    tbgl_entityCreateModelSlot(me.scene, me.entity, me.pivotEntity, me.modelId)
      tbgl_entitySetPos(me.scene, me.entity, 0, 0, 0)

    me.cameraPivot = tbgl_entityGetFreeID(me.scene)
    tbgl_entityCreatePivot(me.scene, me.cameraPivot, me.entity)
    
    me.cameraEntity = tbgl_entityGetFreeID(me.scene)
    tbgl_entityCreateCamera(me.scene, me.cameraEntity, me.cameraPivot)
      tbgl_entitySetPos(me.scene, me.cameraEntity, 0, 2.5, -5)
      tbgl_entitySetTargetPos(me.scene, me.cameraEntity, 0, 1, 0)
      
      tbgl_entitySetRot(me.scene, me.cameraEntity, -1, 0, me.inclination/2 * (me.speed/me.maxSpeed) )
      tbgl_entitySetPos(me.scene, me.cameraEntity, 0, 2.5, -5-me.speed/10)
      
  end function
  
  function EnforceCamera()
    tbgl_entitySetUse(me.scene, me.cameraEntity, True)
  end function
  
  function ProcessInput(controller as tXBoxOneController)
    
    me.gas = controller.GetGas()
    me.steer = controller.GetSteer()

  end function
  
  function ApplyInput(frameRate as float64, track as tTrack)
    single x, y, z
    tbgl_entityGetPos(me.scene, me.pivotEntity, x, y, z)
    
    single terrainPenalty = 1
    if track.isTerrain(x, z) then terrainPenalty = 2
    
    if me.gas = 0 then
      me.speed -= me.maxWind/frameRate
    elseif not track.isTerrain(x, z) then
        me.speed += (me.gas*me.maxAcceleration)/frameRate
    end if
    
    if track.isTerrain(x, z) then
      if me.speed > 1 then
        me.speed -= me.maxWind*4/frameRate
      else
        me.speed += (me.gas*1)/frameRate
      end if
    end if
    
    if me.speed > me.maxSpeed then me.speed = me.maxSpeed
    if me.speed < 0 then me.speed = 0
    
    if me.steer = 0 then
      me.inclination -= (me.inclination*2) / frameRate
    else
      me.inclination += (me.steer*90)/frameRate
    end if
    if me.inclination > me.maxInclination then me.inclination = me.maxInclination
    if me.inclination < -me.maxInclination then me.inclination = -me.maxInclination
    
    'if me.speed then
    tbgl_entityTurn(me.scene, me.pivotEntity, 0, me.steer*((me.maxSpeed*2-me.speed)/me.maxSpeed)*me.maxSteer/frameRate, 0)
    tbgl_entitySetRot(me.scene, me.entity, 0, 0, -me.inclination * (me.speed/me.maxSpeed) )
    
    me.AdjustCamera()
    
    tbgl_entityPush(me.scene, me.pivotEntity, 0, 0, me.speed/frameRate)
    
  end function
  
  function AdjustCamera()
    if me.cameraEntity then
      tbgl_entitySetRot(me.scene, me.cameraEntity, -1, 0, me.inclination/2 * (me.speed/me.maxSpeed) )
      tbgl_entitySetPos(me.scene, me.cameraEntity, 0, 2.5, -5-me.speed/10)
      tbgl_entityTurn(me.scene, me.cameraPivot, 0, 0, 0)
    end if
  end function
  
  function SetPos(x as single, y as single, z as single, optional rotY as single = 0)
    tbgl_entitySetPos(me.scene, me.pivotEntity, x, y, z)
    if function_cparams = 4 then tbgl_entitySetRot(me.scene, me.pivotEntity, 0, rotY, 0)
  end function

  function GetPos(byref x as single, byref y as single, byref z as single)
    tbgl_entityGetPos(me.scene, me.pivotEntity, x, y, z)
  end function

  function IsFinished(track as tTrack)
    single x, y, z
    tbgl_entityGetPos(me.scene, me.pivotEntity, x, y, z)
    
    return dist(track.finishX, track.finishZ, x, z) < 4
  end function
  
  function ReleaseResources()
    if me.modelId then
      gResourceManager.freeModelId(me.modelId)
      me.modelId = 0
    end if
  end function
  
end type
