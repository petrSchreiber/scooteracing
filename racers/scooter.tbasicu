type tScooterRacer

  modelId as int32
  
  scene        as int32
  pivotEntity  as int32
  entity       as int32
  cameraPivot  as int32
  cameraEntity as int32
  
  gas         as Float32
  speed       as Float32
  
  steer       as Float32
  inclination as Float32
  
  maxInclination  as float32
  maxSpeed        as float32
  maxSteer        as float32
  maxWind         as float32

  function Load(modelFile as string)
    me.modelId = gResourceManager.getModelId()
    tbgl_m15LoadModel modelFile, "", me.modelId, 0, %TBGL_NORMAL_PRECISE
    
    me.maxInclination = 25
    me.maxSpeed       = 27
    me.maxSteer       = 135
    me.maxWind        = 15
  end function
  
  function ToEntity(scene as int32) as int32
    me.scene = scene
    me.pivotEntity = tbgl_entityGetFreeID(me.scene)
    tbgl_entityCreatePivot(me.scene, me.pivotEntity, 0)
  
    me.entity = tbgl_entityGetFreeID(me.scene)
    tbgl_entityCreateModelSlot(me.scene, me.entity, me.pivotEntity, me.modelId)
      tbgl_entitySetPos(me.scene, me.entity, 0, 0, 0)

    me.cameraPivot = tbgl_entityGetFreeID(me.scene)
    tbgl_entityCreatePivot(me.scene, me.cameraPivot, me.entity)
    
    me.cameraEntity = tbgl_entityGetFreeID(me.scene)
    tbgl_entityCreateCamera(me.scene, me.cameraEntity, me.cameraPivot)
      tbgl_entitySetPos(me.scene, me.cameraEntity, 0, 2.5, -5)
      tbgl_entitySetTargetPos(me.scene, me.cameraEntity, 0, 1, 0)
      
      tbgl_entitySetRot(me.scene, me.cameraEntity, -1, 0, me.inclination/2 * (me.speed/me.maxSpeed) )
      tbgl_entitySetPos(me.scene, me.cameraEntity, 0, 2.5, -5-me.speed/10)
      
  end function
  
  function EnforceCamera()
    tbgl_entitySetUse(me.scene, me.cameraEntity, True)
  end function
  
  function ProcessInput(controller as tXBoxOneController)
    
    me.gas = controller.GetGas()
    me.steer = controller.GetSteer()

  end function
  
  function ApplyInput(frameRate as float64, track as tTrack)
    single x, y, z
    tbgl_entityGetPos(me.scene, me.pivotEntity, x, y, z)
    
    single terrainPenalty = 1
    if track.isTerrain(x, z) then terrainPenalty = 2
    
    if me.gas = 0 then
      me.speed -= me.maxWind/frameRate
    else
      if not track.isTerrain(x, z) then
        me.speed += (me.gas*10)/frameRate
      else
        if me.speed > 2 then
          me.speed -= me.maxWind*4/frameRate
        else
          me.speed += (me.gas*1)/frameRate
        end if
      end if
    end if
    if me.speed > me.maxSpeed then me.speed = me.maxSpeed
    if me.speed < 0 then me.speed = 0
    
    if me.steer = 0 then
      me.inclination -= (me.inclination*2) / frameRate
    else
      me.inclination += (me.steer*90)/frameRate
    end if
    if me.inclination > me.maxInclination then me.inclination = me.maxInclination
    if me.inclination < -me.maxInclination then me.inclination = -me.maxInclination
    
    'if me.speed then
    tbgl_entityTurn(me.scene, me.pivotEntity, 0, me.steer*((me.maxSpeed*2-me.speed)/me.maxSpeed)*me.maxSteer/frameRate, 0)
    tbgl_entitySetRot(me.scene, me.entity, 0, 0, -me.inclination * (me.speed/me.maxSpeed) )
    
    if me.cameraEntity then
      tbgl_entitySetRot(me.scene, me.cameraEntity, -1, 0, me.inclination/2 * (me.speed/me.maxSpeed) )
      tbgl_entitySetPos(me.scene, me.cameraEntity, 0, 2.5, -5-me.speed/10)
    end if
    
    tbgl_entityPush(me.scene, me.pivotEntity, 0, 0, me.speed/frameRate)
    
  end function
  
  function IsFinished(track as tTrack)
    single x, y, z
    tbgl_entityGetPos(me.scene, me.pivotEntity, x, y, z)
    
    return dist(track.finishX, track.finishZ, x, z) < 3
  end function
  
  function Release()
    if me.modelId then
      gResourceManager.freeModelId(me.modelId)
      me.modelId = 0
    end if
  end function
  
end type
